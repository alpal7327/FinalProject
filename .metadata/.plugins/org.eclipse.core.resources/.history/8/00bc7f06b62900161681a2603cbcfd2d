package fin;

import java.awt.Color;
import java.io.File;

import javax.imageio.ImageIO;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

import static java.lang.Character.*;

import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class OuterSpace extends Canvas implements KeyListener, Runnable
{
	private Dino dino1;
	private Dino dino2;
	private Image dino1im;
	private Image dino2im;
	private String dir1;
	private String dir2;
	private String winner;
	private Integer clock;
	
	private ArrayList<Ammo> shots1;
	private ArrayList<Ammo> shots2;
	

	private boolean[] keys;
	private BufferedImage back;

	public OuterSpace()
	{
		setBackground(Color.WHITE);

		keys = new boolean[10];
		dino1 = new Dino(100,200,3);
		dino2 = new Dino(400,200,3);
		shots1 = new ArrayList<Ammo>();
		shots2 = new ArrayList<Ammo>();
		
		this.addKeyListener(this);
		new Thread(this).start();

		setVisible(true);
	}

   public void update(Graphics window)
   {
	   paint(window);
   }

	public void paint( Graphics window )
	{
		//set up the double buffering to make the game animation nice and smooth
		Graphics2D twoDGraph = (Graphics2D)window;

		//take a snap shop of the current screen and same it as an image
		//that is the exact same width and height as the current screen
		if(back==null)
		   back = (BufferedImage)(createImage(getWidth(),getHeight()));

		//create a graphics reference to the back ground image
		//we will draw all changes on the background image
		Graphics graphToBack = back.createGraphics();

		graphToBack.setColor(Color.BLUE);
		graphToBack.drawString("StarDino ", 25, 50 );
		graphToBack.setColor(Color.WHITE);
		graphToBack.fillRect(0,0,800,600);
		
		//clock
		/*clock+=1;
		if(clock%10000==0)
		{
			
		}*/
		
		//controls
		if(keys[0] == true && dino1.getX()>-25)
		{
			dino1.move("LEFT");
			
			try
			{
				dino1im = ImageIO.read(new File("src/fin/pusheenleft.jpg"));
			}
			catch(Exception e)
			{
				//feel free to do something here
				System.out.println("Houston we have a problem");
			}
			dir1 = "left";
		}
		if(keys[1] == true)
		{
			dino1.move("RIGHT");
			try
			{
				dino1im = ImageIO.read(new File("src/fin/pusheenright.jpg"));
			}
			catch(Exception e)
			{
				//feel free to do something here
				System.out.println("Houston we have a problem");
			}
			dir1 = "right";
		}
		
		if(keys[2] == true)
		{
			dino1.move("UP");
		}
		
		if(keys[3] == true)
		{
			dino1.move("DOWN");
		}
		//shoot
		if(keys[4] == true)
		{
			Ammo shot = new Ammo(dino1.getX()+35,dino1.getY(),4, dir1);
			shots1.add(shot);
			keys[4]=false;
		}
		if(dino1.getX()>=750)
			dino1.setX(0);
		if(dino1.getX()<=-20)
			dino1.setX(740);
		if(dino1.getY()<=-25)
			dino1.setY(540);
		if(dino1.getY()>=550)
			dino1.setY(0);

		dino1.draw(graphToBack, dino1im);

		for(Ammo s : shots1)
		{
			//move and remove if out of bounds
			if(s.getDirection()=="left")
				s.move("LEFT");
			else if(s.getDirection()=="right")
				s.move("RIGHT");
			s.draw(graphToBack);
			if(s.getY()+15<0 || s.getY()>600 || s.getX()+15<0 || s.getX()>800)
				shots1.remove(s);
			//collision
			if(s.getX()+15>dino2.getX()&&s.getX()<dino2.getX()+65&&s.getY()+15>dino2.getY()&&s.getY()<dino2.getY()+75)
				{
					shots1.remove(s);
					winner = "Pusheenosaurus is the winner!";
				}
		}
		
		//dino2
		if(keys[5] == true)
		{
			dino2.move("LEFT");
			try
			{
				dino2im = ImageIO.read(new File("src/fin/paulleft.jpg"));
			}
			catch(Exception e)
			{
				//feel free to do something here
				System.out.println("Houston we have a problem");
			}
			dir2 = "left";
		}
		if(keys[6] == true)
		{
			dino2.move("RIGHT");
			try
			{
				dino2im = ImageIO.read(new File("src/fin/paulright.jpg"));
			}
			catch(Exception e)
			{
				//feel free to do something here
				System.out.println("Houston we have a problem");
			}
			dir2 = "right";
		}
		
		if(keys[7] == true)
		{
			dino2.move("UP");
		}
		
		if(keys[8] == true)
		{
			dino2.move("DOWN");
		}
		//shoot
		if(keys[9] == true)
		{
			Ammo shot = new Ammo(dino2.getX()+35,dino2.getY(),4, dir2);
			shots2.add(shot);
			keys[9]=false;
		}
		if(dino2.getX()>=750)
			dino2.setX(0);
		if(dino2.getX()<=-20)
			dino2.setX(740);
		if(dino2.getY()<=-25)
			dino2.setY(540);
		if(dino2.getY()>=550)
			dino2.setY(0);

		dino2.draw(graphToBack, dino2im);

		for(Ammo s : shots2)
		{
			//move and remove if out of bounds
			if(s.getDirection()=="left")
				s.move("LEFT");
			else if(s.getDirection()=="right")
				s.move("RIGHT");
			s.draw(graphToBack);
			if(s.getY()+15<0 || s.getY()>600 || s.getX()+15<0 || s.getX()>800)
				shots2.remove(s);
			//collision
			if(s.getX()+15>dino1.getX()&&s.getX()<dino1.getX()+65&&s.getY()+15>dino1.getY()&&s.getY()<dino1.getY()+75)
				{
					shots2.remove(s);
					winner = "Paul is the winner!";
				}
			for(Ammo c : shots1)
			{
				if(s.getX()+15>c.getX()&&s.getX()<c.getX()+15&&s.getY()<c.getY()+15&&s.getY()+15>c.getY())
				{
					shots2.remove(s);
					shots1.remove(c);
				}
			}
		}
		
		twoDGraph.drawImage(back, null, 0, 0);
		if(winner.length()>0)
		{
			window.setFont(new Font("TAHOMA",Font.BOLD,22));
			window.setColor(Color.orange);
			window.drawString(winner, 320,420);	
			try{
			   Thread.currentThread().sleep(1500);
			}
			catch(Exception e){
			}
			repaint();
		}
	}


	public void keyPressed(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_L)
		{
			keys[4] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_A)
		{
			keys[5] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_D)
		{
			keys[6] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_W)
		{
			keys[7] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_S)
		{
			keys[8] = true;
		}
		if (e.getKeyCode() == KeyEvent.VK_V)
		{
			keys[9] = true;
		}
		
		repaint();
	}

	public void keyReleased(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			keys[0] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
			keys[1] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
			keys[2] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			keys[3] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_L)
		{
			keys[4] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_A)
		{
			keys[5] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_D)
		{
			keys[6] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_W)
		{
			keys[7] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_S)
		{
			keys[8] = false;
		}
		if (e.getKeyCode() == KeyEvent.VK_V)
		{
			keys[9] = false;
		}
		repaint();
		
	}

	public void keyTyped(KeyEvent e)
	{

	}

   public void run()
   {
   	try
   	{
   		while(true)
   		{
   		   Thread.currentThread().sleep(5);
            repaint();
         }
      }catch(Exception e)
      {
      }
  	}
}

